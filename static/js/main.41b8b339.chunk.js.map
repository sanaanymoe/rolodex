{"version":3,"sources":["components/Card/Card.tsx","components/CardList/CardList.tsx","components/SearchBox/SearchBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","props","className","src","monster","id","name","email","CardList","monsters","map","SearchBox","type","placeholder","placeHolder","onChange","handleChange","App","useState","setMonsters","searchTerm","setSearchTerm","useEffect","fetch","then","res","json","users","filter","user","toLowerCase","includes","e","target","value","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAIaA,EAAO,SAACC,GACnB,OACE,sBAAKC,UAAU,gBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,4BACR,oCAAKJ,QAAL,IAAKA,OAAL,EAAKA,EAAOG,QAAQE,OACpB,mCAAKL,QAAL,IAAKA,OAAL,EAAKA,EAAOG,QAAQG,YCJbC,EAAW,SAACP,GACrB,OACE,qBAAKC,UAAU,WAAf,SACGD,EAAMQ,SAASC,KAAI,SAACN,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCDhBM,G,MAAY,SAACV,GAEtB,OACE,uBACEC,UAAU,SACVU,KAAK,SACLC,YAAaZ,EAAMa,YACnBC,SAAUd,EAAMe,iBCuBTC,EAjCH,WAAO,IAAD,EACgBC,mBAAgB,IADhC,mBACTT,EADS,KACCU,EADD,OAEmBD,mBAAc,IAFjC,mBAEVE,EAFU,KAEEC,EAFF,KAoBhB,OAZAC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAD,OACJR,EACEQ,EAAMC,QAAO,SAACC,GAAD,OACXA,EAAKvB,KAAKwB,cAAcC,SAASX,EAAWU,yBAOpD,sBAAK5B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CAAWY,YAAY,kBAAkBE,aAnBxB,SAACgB,GACpBX,EAAcW,EAAEC,OAAOC,UAmBpBzB,EAAS0B,OAAS,EACjB,cAAC,EAAD,CAAU1B,SAAUA,IAEpB,gEClBO2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.41b8b339.chunk.js","sourcesContent":["import React from \"react\"\nimport './Card.styles.css'\n\n\nexport const Card = (props: any) => {\n  return (\n    <div className=\"CardContainer\">\n      <img src={`https://robohash.org/${props.monster.id}?set=set5&size=180x180`}></img>\n      <h2>{props?.monster.name}</h2>\n      <p>{ props?.monster.email }</p>\n    </div>\n  );\n};\n","import React from 'react'\nimport './CardList.styles.css'\nimport { Card } from '../Card/Card'\n\n\nexport const CardList = (props: any) => {\n    return (\n      <div className=\"CardList\">\n        {props.monsters.map((monster: any) => (\n          <Card key={monster.id} monster={monster}/>\n        ))}\n      </div>\n    );\n}\n","import React, { useEffect, useState } from \"react\";\n\nimport './SearchBox.styles.css'\ninterface Props {\n    placeHolder: string,\n    handleChange : (e: any) => void\n}\n\nexport const SearchBox = (props: Props) => {\n  \n    return (\n      <input\n        className=\"search\"\n        type=\"search\"\n        placeholder={props.placeHolder}\n        onChange={props.handleChange}\n      />\n    );\n    \n}","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/CardList/CardList\";\nimport { SearchBox } from './components/SearchBox/SearchBox'\n\nconst App = () => {\n  const [monsters, setMonsters] = useState<any[]>([]);\n  const[searchTerm, setSearchTerm] = useState<any>(\"\");\n\n  const handleSearch = (e: any) => {\n    setSearchTerm(e.target.value)\n  }\n\n  useEffect(() => {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((users) =>\n        setMonsters(\n          users.filter((user: any) =>\n            user.name.toLowerCase().includes(searchTerm.toLowerCase())\n          )\n        )\n      );\n  });\n\n  return (\n    <div className=\"App\">\n      <h1> Monsters Rolodex </h1>\n      <SearchBox placeHolder=\"Search Monsters\" handleChange ={handleSearch}/>\n      {monsters.length > 0 ? (\n        <CardList monsters={monsters} />\n      ) : (\n        <h1>Sorry No Monsters Matching</h1>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}